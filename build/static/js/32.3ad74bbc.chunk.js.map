{"version":3,"sources":["pages/tests/StudentListModal.js","@core/components/datepicker/DatePicker.js","@core/components/datepicker/TimePicker.js","pages/tests/TestDurationModal.js","helpers/HelperFunctions.js","pages/tests/PastAndUpcomingTestStudentList.js","pages/tests/TestTabContainer.js","pages/tests/AssignTest.js","@core/components/ui-loader/index.js","components/date-time.js","@core/components/card-reload/index.js","pages/tests/TestDetail.js"],"names":["StudentListModal","props","students","isOpen","toggleModalState","onSelectedStudent","react_default","a","createElement","Modal","className","scrollable","toggle","ModalHeader","ModalBody","Table","responsive","map","s","i","key","concat","userId","avatar","img","getProfileImageUrl","user","profilePicture","name","email","date_time","dateTime","createdAt","type","Button","Ripple","color","onClick","e","preventDefault","DatePicker","FormGroup_default","Label","for","label","build_default","value","onChange","date","id","options","dateFormat","disable","disableDates","d","moment","format","TimePicker","enableTime","noCalendar","time_24hr","defaultMinute","minuteIncrement","TestDurationModal","setTestDuration","_useState","useState","Date","_useState2","Object","slicedToArray","startDate","setStartDate","_useState3","_useState4","endDate","setEndDate","_useState5","_useState6","startTime","setStartTime","_useState7","_useState8","endTime","setEndTime","_useState9","_useState10","isOpenModal","Row","Col","md","datepicker_DatePicker","datepicker_TimePicker","ModalFooter","mergeDateTime","time","arguments","length","undefined","timeFormat","mapDispatchToProps","getAllStudents","withRouter","connect","state","_state$Students","Students","studentsError","studentsLoading","isUpcoming","onAssignTest","onUnassignTest","studentTests","fetchStudents","isReloading","studentModalState","setStudentModalState","testModalState","setTestModalState","selectedStudent","setSelectedStudent","useEffect","getStudentStatusColor","studentStatus","toggleStudentModalState","card_reload","title","onReload","size","CardBody","hover","studentTestId","Badge","pill","status","titleCase","UncontrolledDropdown","DropdownToggle","tag","more_vertical","DropdownMenu","right","DropdownItem","href","student","UnassignTest","file_text","tests_StudentListModal","tests_TestDurationModal","data","testData","unassignTest","assignTest","getPastStudent","getUpcomingStudent","_state$Tests","Tests","assignTestLoading","assignTestError","assignTestSuccess","pastStudents","pastStudentsLoading","pastStudentsError","upcomingStudents","upcomingStudentsLoading","upcomingStudentsError","unassignTestLoading","unassignTestError","unassignTestSuccess","MySwal","withReactContent","Swal","active","setActive","isLoading","setIsLoading","test","tab","testId","ApiResponseAlert","msg","icon","fire","customClass","confirmButton","buttonsStyling","Fragment","ui_loader","blocking","Card","Nav","tabs","fill","NavItem","NavLink","TabContent","activeTab","TabPane","tabId","tests_PastAndUpcomingTestStudentList","studentId","AssignTestHome","location","keys","lg","TestDetail","TestTabContainer","UILoader","_classnames","children","loader","overlayColor","Tag","react__WEBPACK_IMPORTED_MODULE_1___default","classnames","_Users_efsolpc1_Projects_infonow_teacher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","assign","style","backgroundColor","defaultProps","reactstrap__WEBPACK_IMPORTED_MODULE_3__","__webpack_require__","__webpack_exports__","DateTime","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","moment__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_1___default","prop_types__WEBPACK_IMPORTED_MODULE_2__","prop_types__WEBPACK_IMPORTED_MODULE_2___default","utc","local","invalidValueText","propTypes","PropTypes","string","_components_ui_loader__WEBPACK_IMPORTED_MODULE_2__","react_feather__WEBPACK_IMPORTED_MODULE_3__","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","CardReload","console","log","BlockUiWrapper","UiLoader","reactstrap__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","_components_date_time__WEBPACK_IMPORTED_MODULE_7__","react_feather__WEBPACK_IMPORTED_MODULE_8__","react_feather__WEBPACK_IMPORTED_MODULE_9__","react_redux__WEBPACK_IMPORTED_MODULE_10__","react_router_dom__WEBPACK_IMPORTED_MODULE_11__","isEdit","onChangeView","history","goBack","push","pathname","timeLimit"],"mappings":"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","file":"static/js/32.3ad74bbc.chunk.js","sourcesContent":["\nimport React from 'react'\nimport {\n    Button, Modal, ModalHeader, ModalBody, Table\n} from 'reactstrap'\n\nimport Avatar from '@components/avatar'\nimport { DateTime } from '../../components/date-time';\nimport { useState } from 'react';\nimport { getProfileImageUrl } from '../../helpers/url_helper'\nconst StudentListModal = (props) => {\n\n    const { students, isOpen, toggleModalState, onSelectedStudent } = props\n\n\n    return (\n        < Modal className=\"modal-lg\" scrollable isOpen={isOpen} toggle={toggleModalState}>\n            <ModalHeader toggle={toggleModalState}>Assign test to student</ModalHeader>\n            <ModalBody>\n\n                <Table responsive >\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>Created At</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {students && students.map((s, i) =>\n                            <tr key={`student-list-${s.userId}`} >\n                                <td>{i + 1}</td>\n                                <td >\n                                    <Avatar\n                                        className='cursor-pointer'\n                                        img={getProfileImageUrl(s.user.profilePicture)}\n                                    />\n                                    <span className='align-middle font-weight-bold ml-1'>\n                                        {s.user.name}\n                                    </span>\n                                </td>\n                                <td>{s.user.email}</td>\n                                <td><DateTime dateTime={s.user.createdAt} type=\"date\" /></td>\n\n                                <td>\n                                    <Button.Ripple color='flat-primary' onClick={e => { e.preventDefault(); onSelectedStudent(s) }}>\n                                        Assign\n                                    </Button.Ripple>\n                                </td>\n\n\n                            </tr>\n                        )}\n                    </tbody>\n                </Table>\n\n            </ModalBody>\n        </Modal >\n\n    )\n}\nexport default StudentListModal","import React, { Fragment, useState } from 'react'\nimport { Label } from 'reactstrap'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport FormGroup from 'reactstrap/lib/FormGroup'\nimport moment from 'moment'\n\n\nconst DatePicker = (props) => {\n\n  return (\n    <FormGroup>\n      <Label for='default-picker'>{props.label || 'Date'}</Label>\n      <Flatpickr\n        className='form-control'\n        value={props.value}\n        onChange={date => props.onChange(date[0])}\n        id='default-picker'\n        options={{\n          dateFormat: \"d/m/Y\",\n          disable: props.disableDates ? props.disableDates.map(d => moment(d).format(\"DD/MM/YYYY\")) : [],\n        }}\n      />\n    </FormGroup>\n  )\n}\n\nexport default DatePicker\n","import React from 'react'\nimport { Fragment, useState } from 'react'\nimport { Label } from 'reactstrap'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport FormGroup from 'reactstrap/lib/FormGroup'\n\nconst TimePicker = (props) => {\n\n  return (\n    <FormGroup>\n      <Label id='timepicker'>{props.label || \"Time\"}</Label>\n      <Flatpickr\n        className='form-control'\n        value={props.value}\n        id='timepicker'\n\n        options={{\n          enableTime: true,\n          noCalendar: true,\n          dateFormat: 'G:i K',\n          time_24hr: false,\n          defaultMinute: 0,\n          minuteIncrement: 15\n        }}\n\n        onChange={date => props.onChange(date[0])}\n      />\n    </FormGroup>\n  )\n}\n\nexport default TimePicker\n","\nimport React from 'react'\nimport {\n    Button, Modal, ModalHeader, ModalBody, ModalFooter, Row, Col\n} from 'reactstrap'\n\nimport { useState, Fragment } from 'react';\nimport DatePicker from '@components/datepicker/DatePicker';\nimport TimePicker from '@components/datepicker/TimePicker';\n\nconst TestDurationModal = (props) => {\n\n    const { isOpen, toggleModalState, setTestDuration } = props\n    const [startDate, setStartDate] = useState(new Date())\n    const [endDate, setEndDate] = useState(new Date())\n    const [startTime, setStartTime] = useState(new Date())\n    const [endTime, setEndTime] = useState(new Date())\n    const [isOpenModal, setIsOpenModal] = useState(isOpen)\n\n\n    const setTest = () => {\n        let data = {\n            startDate,\n            endDate,\n            startTime,\n            endTime\n        }\n        setTestDuration(data)\n    }\n\n\n    return (\n        < Modal className=\"modal-lg\" scrollable isOpen={isOpenModal} toggle={toggleModalState}>\n            <ModalHeader toggle={toggleModalState}>Select test to Start and End date </ModalHeader>\n            <ModalBody>\n\n                <Row>\n                    <Col md={6}>\n                        <DatePicker label=\"Start Date\" value={startDate} onChange={setStartDate} />\n\n                    </Col>\n                    <Col md={6}>\n                        <TimePicker label=\"Start Time\" value={startTime} onChange={setStartTime} />\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col md={6}>\n                        <DatePicker label=\"End Date\" value={endDate} onChange={setEndDate} />\n                    </Col>\n                    <Col md={6}>\n                        <TimePicker label=\"End Time\" value={endTime} onChange={setEndTime} />\n                    </Col>\n                </Row>\n\n            </ModalBody>\n            <ModalFooter>\n                <Button color='primary' onClick={setTest}> Done </Button>\n            </ModalFooter>\n        </Modal >\n\n    )\n}\nexport default TestDurationModal","import moment from \"moment\";\n\nexport function titleCase(str) {\n    return str.toLowerCase().replace(/\\b(\\w)/g, s => s.toUpperCase());\n}\n\nexport function mergeDateTime(date, time, dateFormat = \"YYYY-MM-DD\", timeFormat = \"HH:mm\") {\n    return `${moment(date).format(dateFormat)} ${moment(time).format(timeFormat)}`;\n}","import React from 'react';\nimport { useEffect } from 'react';\nimport {\n    CardBody,\n    CardTitle,\n    Table,\n    Badge,\n    Button\n} from 'reactstrap';\nimport { MoreVertical, Edit, FileText } from 'react-feather'\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport CardReload from '../../@core/components/card-reload';\nimport Avatar from '@components/avatar'\nimport { titleCase } from '@utils';\nimport { DateTime } from '../../components/date-time';\nimport { useState } from 'react';\nimport { getAllStudents } from '@store/actions';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getProfileImageUrl } from '../../helpers/url_helper'\nimport StudentListModal from '../tests/StudentListModal';\nimport TestDurationModal from '../tests/TestDurationModal';\nimport { mergeDateTime } from '../../helpers/HelperFunctions';\n\nconst PastAndUpcomingTestStudentList = (props) => {\n    const {\n        isUpcoming,\n        onAssignTest,\n        onUnassignTest,\n        studentTests,\n        fetchStudents,\n        isReloading,\n        students\n    } = props\n\n\n    const [studentModalState, setStudentModalState] = useState(false)\n    const [testModalState, setTestModalState] = useState(false)\n    const [selectedStudent, setSelectedStudent] = useState(null)\n\n    const fetchAllStudents = () => {\n        props.getAllStudents();\n    }\n\n    useEffect(() => {\n        fetchAllStudents();\n    }, []);\n\n    const getStudentStatusColor = (studentStatus) => {\n        switch (studentStatus) {\n            case 'active': return 'light-success';\n            case 'blocked': return 'light-danger';\n            case 'waiting-for-teacher': return 'light-warning';\n            case 'new': return 'light-warning';\n            default: return 'light-warning'\n        }\n    }\n\n    const selectedStudentAssign = (student) => {\n        setSelectedStudent(student)\n        setStudentModalState(!studentModalState)\n        setTestModalState(!testModalState)\n    }\n\n    const setTestDuration = (data) => {\n        setTestModalState(!testModalState)\n        let testData = {\n            startTime: mergeDateTime(data.startDate, data.startTime),\n            endTime: mergeDateTime(data.endDate, data.endTime),\n            student: selectedStudent\n        }\n        if (props.onAssignTest)\n            onAssignTest(testData)\n    }\n\n    const UnassignTest = (e, student) => {\n        e.preventDefault()\n        if (props.onUnassignTest)\n            onUnassignTest(student.studentTestId)\n    }\n\n    const toggleStudentModalState = () => {\n        setStudentModalState(!studentModalState)\n    }\n\n    const toggleTestModalState = () => {\n        setTestModalState(!testModalState)\n    }\n\n    return (\n\n        <CardReload\n            className=\"past-and-upcoming-test-student\"\n            title='Students'\n            onReload={fetchStudents}\n            isReloading={isReloading}>\n            {\n                isUpcoming &&\n                <Button.Ripple className='btn-header' size=\"sm\" color='primary' onClick={() => toggleStudentModalState()} >\n                    <span className='align-middle ml-25'>Schedule Test</span>\n                </Button.Ripple>\n            }\n            <CardBody className=\"p-0\">\n                <Table responsive hover >\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Name</th>\n                            <th>Start time</th>\n                            <th>End time</th>\n                            <th>Status</th>\n                            {\n                                isUpcoming &&\n                                <th>Action</th>\n                            }\n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {studentTests && studentTests.map((s, i) =>\n                            <tr key={s.studentTestId} >\n                                <td>{i + 1}</td>\n                                <td >\n                                    <Avatar\n                                        className='cursor-pointer'\n                                        img={getProfileImageUrl(s.user.user.profilePicture)}\n                                    />\n                                    <span className='align-middle font-weight-bold ml-1'>\n                                        {s.user.user.name}\n                                    </span>\n                                </td>\n                                <td><DateTime dateTime={s.startTime} type=\"datetime\" /></td>\n                                <td><DateTime dateTime={s.endTime} type=\"datetime\" /></td>\n                                <td>\n                                    <Badge\n                                        pill\n                                        color={getStudentStatusColor(s.user.status)}\n                                        className='mr-1'>\n                                        {titleCase(s.user.status)}\n                                    </Badge>\n                                </td>\n                                {\n                                    isUpcoming &&\n                                    <td>\n                                        <div className='d-flex'>\n                                            <UncontrolledDropdown>\n                                                <DropdownToggle className='pr-1' tag='span'>\n                                                    <MoreVertical size={15} />\n                                                </DropdownToggle>\n                                                <DropdownMenu right>\n                                                    <DropdownItem tag='a' href='/' className='w-100' onClick={e => UnassignTest(e, s)}>\n                                                        <FileText size={15} />\n                                                        <span className='align-middle ml-50'>Unassign</span>\n                                                    </DropdownItem>\n                                                </DropdownMenu>\n                                            </UncontrolledDropdown>\n                                        </div>\n                                    </td>\n                                }\n                            </tr>\n                        )}\n                    </tbody>\n                </Table>\n                {\n                    studentModalState &&\n                    <StudentListModal\n                        students={students}\n                        isOpen={studentModalState}\n                        onSelectedStudent={selectedStudentAssign}\n                        toggleModalState={toggleStudentModalState} />\n                }\n\n                {\n                    testModalState &&\n                    <TestDurationModal\n                        isOpen={testModalState}\n                        setTestDuration={setTestDuration}\n                        toggleModalState={toggleTestModalState} />\n                }\n            </CardBody >\n        </CardReload >\n    );\n};\n\n\n\nconst mapStateToProps = (state) => {\n    const { students,\n        studentsError,\n        studentsLoading } = state.Students;\n    return {\n        students,\n        studentsError,\n        studentsLoading\n    };\n};\n\nconst mapDispatchToProps = {\n    getAllStudents\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PastAndUpcomingTestStudentList)\n)\n","import React from 'react';\n\nimport {\n    Card,\n    CardBody\n} from 'reactstrap';\nimport { useState, useEffect } from 'react'\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport '../../assets/scss/custom/components/_card.scss'\nimport UILoader from '../../@core/components/ui-loader';\nimport {\n    assignTest,\n    unassignTest,\n    getPastStudent,\n    getUpcomingStudent,\n} from '@store/actions'\nimport PastAndUpcomingTestStudentList from './PastAndUpcomingTestStudentList';\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport '@styles/base/plugins/extensions/ext-component-sweet-alerts.scss'\n\n\nconst TestsTabContainer = (props) => {\n\n    const MySwal = withReactContent(Swal)\n    const [active, setActive] = useState('1')\n    const [isLoading, setIsLoading] = useState(false)\n    const { test, pastStudents, upcomingStudents,\n        assignTestLoading,\n        pastStudentsLoading,\n        upcomingStudentsLoading,\n        unassignTestLoading } = props\n\n    const toggle = tab => {\n        if (active !== tab) {\n            setActive(tab)\n        }\n    }\n\n    const fetchStudents = () => {\n        props.getPastStudent(test.testId);\n        props.getUpcomingStudent(test.testId);\n    }\n\n    useEffect(() => {\n        fetchStudents();\n    }, []);\n\n    useEffect(() => {\n        setIsLoading(assignTestLoading)\n    }, [assignTestLoading]);\n\n    useEffect(() => {\n        setIsLoading(unassignTestLoading)\n    }, [unassignTestLoading]);\n\n    useEffect(() => {\n        if (props.assignTestError) ApiResponseAlert(props.assignTestError, 'error');\n        if (props.assignTestSuccess) ApiResponseAlert('Test has been assigned successfully', 'success');\n        fetchStudents()\n    }, [props.assignTestError, props.assignTestSuccess]);\n\n    useEffect(() => {\n        if (props.unassignTestError) ApiResponseAlert(props.unassignTestError, 'error');\n        if (props.unassignTestSuccess) ApiResponseAlert('Test has been unassigned successfully', 'success');\n        fetchStudents()\n    }, [props.unassignTestError, props.unassignTestSuccess]);\n\n    const ApiResponseAlert = (msg, icon) => {\n        return MySwal.fire({\n            title: msg,\n            icon: icon,\n            customClass: {\n                confirmButton: 'btn btn-primary'\n            },\n            buttonsStyling: false\n        })\n    }\n\n    const assignTest = (testData) => {\n        let data = {\n            studentId: testData.student.user.userId,\n            startTime: testData.startTime,\n            endTime: testData.endTime,\n            testId: test.testId\n        }\n        props.assignTest(data)\n    }\n\n    const unAssignTest = (studentTestId) => {\n        let data = {\n            studentId: studentTestId,\n            testId: test.testId\n        }\n        props.unassignTest(data)\n    }\n\n    return (\n        <>\n            <UILoader blocking={isLoading}>\n                <Card>\n                    <CardBody >\n                        <Nav tabs fill>\n                            <NavItem>\n                                <NavLink\n                                    active={active === '1'}\n                                    onClick={() => {\n                                        toggle('1')\n                                    }}\n                                >\n                                    Past Test\n                                </NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink\n                                    active={active === '2'}\n                                    onClick={() => {\n                                        toggle('2')\n                                    }}\n                                >\n                                    Upcoming Test\n                                </NavLink>\n                            </NavItem>\n\n                        </Nav>\n\n                        <TabContent className='py-50' activeTab={active}>\n                            <TabPane tabId='1'>\n                                <PastAndUpcomingTestStudentList\n                                    studentTests={pastStudents}\n                                    isUpcoming={false}\n                                    fetchStudents={fetchStudents}\n                                    isReloading={pastStudentsLoading}\n                                />\n                            </TabPane>\n\n                            <TabPane tabId='2'>\n                                <PastAndUpcomingTestStudentList\n                                    studentTests={upcomingStudents}\n                                    isUpcoming={true}\n                                    fetchStudents={fetchStudents}\n                                    onAssignTest={assignTest}\n                                    onUnassignTest={unAssignTest}\n                                    isReloading={upcomingStudentsLoading}\n                                />\n                            </TabPane>\n                        </TabContent>\n                    </CardBody>\n                </Card>\n            </UILoader>\n        </>\n    )\n\n};\n\n\n\nconst mapStateToProps = (state) => {\n    const {\n\n        assignTest, assignTestLoading,\n        assignTestError, assignTestSuccess,\n        pastStudents, pastStudentsLoading, pastStudentsError,\n        upcomingStudents, upcomingStudentsLoading, upcomingStudentsError,\n        unassignTestLoading, unassignTestError, unassignTestSuccess,\n    } = state.Tests\n    return {\n        assignTest, assignTestLoading,\n        assignTestError, assignTestSuccess,\n        pastStudents, pastStudentsLoading, pastStudentsError,\n        upcomingStudents, upcomingStudentsLoading, upcomingStudentsError,\n    }\n\n}\n\nconst mapDispatchToProps = {\n    unassignTest,\n    assignTest,\n    getPastStudent,\n    getUpcomingStudent\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(TestsTabContainer)\n)","import React from 'react';\n\nimport {\n    Row,\n    Col,\n} from 'reactstrap';\n\nimport TestDetail from '../tests/TestDetail';\nimport TestsTabContainer from './TestTabContainer';\n\n\nconst AssignTestHome = (props) => {\n\n    const { test } = props.location.state;\n\n    return (\n        <>\n            {\n                Object.keys(test).length > 0 && (\n                    <Row>\n                        <Col lg={12}>\n                            <TestDetail test={test} />\n                        </Col>\n\n                        <Col lg={12}>\n                            <TestsTabContainer test={test} />\n                        </Col>\n                    </Row>\n                )\n            }\n        </>\n    );\n};\n\n\nexport default AssignTestHome\n\n\n","\nimport React from 'react';\n\n// ** Third Party Components\nimport { Fragment } from 'react'\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Spinner } from 'reactstrap'\n\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n          /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","import React from 'react'\nimport moment from 'moment';\nimport PropTypes from 'prop-types'\nconst DATE_TIME_FORMAT = 'DD/MM/yyyy hh:mmA'\nconst DATE_FORMAT = 'DD/MM/yyyy'\nconst TIME_FORMAT = 'hh:mmA'\n\nexport const DateTime = (props) => {\n    let format = DATE_TIME_FORMAT;\n\n    if (props.type) {\n        if (props.type === 'date') format = DATE_FORMAT\n        if (props.type === 'time') format = TIME_FORMAT\n    }\n\n    return (\n        <>\n            {props.dateTime ? moment.utc(props.dateTime).local().format(props.format || format) : props.invalidValueText}\n        </>\n    )\n}\n\nexport const DateTimeFunction = (dateTime, format = DATE_TIME_FORMAT) => {\n    return moment.utc(dateTime).local().format(format)\n}\n\nDateTime.propTypes = {\n    dateTime: PropTypes.string,\n    invalidValueText: PropTypes.string\n}","import React from 'react';\n// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\nimport { Card, CardHeader, CardTitle, Collapse, Spinner } from 'reactstrap'\n\nconst CardReload = props => {\n    // ** Props\n    const { title, isReloading, onReload, children } = props\n    console.log(props);\n    // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n    const BlockUiWrapper = isReloading ? UiLoader : Fragment\n\n    return (\n        <BlockUiWrapper\n            /*eslint-disable */\n            /*eslint-disable */\n            {...(props.isReloading\n                ? {\n                    blocking: isReloading\n                }\n                : {})}\n        /*eslint-enable */\n        /*eslint-enable */\n        >\n            <Card className={props.className}>\n                <CardHeader>\n                    <CardTitle tag='h4'>{title}</CardTitle>\n                    {onReload && <div className='action-icons'><RotateCw className='cursor-pointer' size={15} onClick={() => onReload()} /></div>}\n                </CardHeader>\n                {children}\n            </Card>\n        </BlockUiWrapper>\n    )\n}\n\nexport default CardReload\n\n// ** PropTypes\nCardReload.propTypes = {\n    title: PropTypes.string.isRequired,\n    onReload: PropTypes.func,\n    isReloading: PropTypes.bool\n}\n","import React from 'react';\nimport {\n    CardBody,\n    Card,\n    CardHeader,\n    Button,\n    Row,\n    Col,\n    CardText\n} from 'reactstrap';\nimport { DateTime } from '../../components/date-time';\nimport PropTypes from 'prop-types';\nimport { ArrowLeft, Edit } from 'react-feather'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nconst TestDetail = (props) => {\n\n    const { test, isEdit, onChangeView } = props;\n\n    const onAssignTest = () => {\n\n        props.history.push({\n            pathname: `/assign-test/${test.testId}`,\n            state: { test: test }\n        })\n    }\n\n    return (\n        <>\n            {\n                Object.keys(test).length > 0 && (\n                    <div>\n                        <Row className=\"mb-2\">\n                            <Col md=\"6\">\n                                <Button.Ripple className=\"btn-icon\" size=\"sm\" onClick={() => props.history.goBack()}><ArrowLeft size={16} /></Button.Ripple>\n                                <h3 className='ml-2 d-inline m-0'>Test</h3>\n                            </Col>\n                            {\n                                isEdit &&\n                                <Col md=\"6\" className=\"text-right\">\n                                    <Button.Ripple className=\"mr-1\" color='secondary' onClick={onChangeView} >\n                                        <Edit size={14} />\n                                        <span className='align-middle ml-25'>Edit</span>\n                                    </Button.Ripple>\n\n                                    <Button.Ripple color='primary' onClick={onAssignTest}  >\n                                        <span className='align-middle ml-25'>Test Dashboard</span>\n                                    </Button.Ripple>\n                                </Col>\n                            }\n                        </Row>\n                        <Card>\n                            <CardBody>\n                                <Row >\n                                    <Col>\n                                        <div className='user-avatar-section'>\n                                            <div className='d-flex justify-content-start'>\n\n                                                <div className='d-flex flex-column'>\n                                                    <div className='user-info '>\n                                                        <h4 className=''>{test.title}</h4>\n                                                        <Row>\n                                                            <CardText tag='span' className='ml-1'>\n                                                                Created At: <strong>{<DateTime dateTime={test.createdAt} type=\"datetime\" />}</strong>\n                                                            </CardText>\n                                                        </Row>\n                                                        <Row>\n                                                            <CardText tag='span' className='ml-1'>\n                                                                Duration: <strong>{test.timeLimit / 60} mins</strong>\n                                                            </CardText>\n                                                        </Row>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </CardBody>\n                        </Card>\n                    </div>\n                )}\n        </>\n    );\n};\n\n\nTestDetail.propTypes = {\n    onSelect: PropTypes.func,\n    test: PropTypes.object.isRequired,\n    onBack: PropTypes.func\n}\n\n\nexport default withRouter(connect()(TestDetail))\n\n\n\n\n"],"sourceRoot":""}
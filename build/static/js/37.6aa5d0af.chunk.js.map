{"version":3,"sources":["pages/lessons/new-lesson.js","@core/components/ui-loader/index.js","utility/toast.js"],"names":["withRouter","connect","state","_state$Lessons","Lessons","topics","selectedTopic","newLessonUploading","newLessonError","addNewLesson","props","_useState","useState","EditorState","createEmpty","_useState2","Object","_Users_efsolpc1_Projects_infonow_teacher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","editorState","setEditorState","_useState3","_useState4","isNewLesson","setIsNewLesson","_useState5","_useState6","title","setTitle","_useState7","_useState8","description","setDescription","_useState9","_useState10","videoUrl","setVideoUrl","_useState11","_useState12","isPreview","setIsPreview","lessonContentRef","React","createRef","useEffect","history","goBack","notifyError","notifySuccess","youTubeParser","url","match","length","getMarkDownContent","content","getCurrentContent","rawObject","convertToRaw","draftToMarkdown","getVideoLink","concat","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_1__","_core_components_ui_loader__WEBPACK_IMPORTED_MODULE_15__","blocking","reactstrap__WEBPACK_IMPORTED_MODULE_3__","reactstrap__WEBPACK_IMPORTED_MODULE_4__","className","reactstrap__WEBPACK_IMPORTED_MODULE_5__","Ripple","color","onClick","react_feather__WEBPACK_IMPORTED_MODULE_23__","size","find","t","id","type","src","frameBorder","allow","allowFullScreen","ref","markdown","String","replaceAll","setTimeout","fun","current","render","react_markdown__WEBPACK_IMPORTED_MODULE_16___default","renderLesson","reactstrap__WEBPACK_IMPORTED_MODULE_6__","onSubmit","e","preventDefault","topic","submitLesson","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","placeholder","value","onChange","target","required","rows","react_draft_wysiwyg__WEBPACK_IMPORTED_MODULE_20__","onEditorStateChange","wrapperClassName","editorClassName","toolbarClassName","getVideoThumbnailUrl","alt","UILoader","_classnames","children","loader","tag","overlayColor","Tag","classnames","_Users_efsolpc1_Projects_infonow_teacher_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","assign","style","backgroundColor","defaultProps","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_feather__WEBPACK_IMPORTED_MODULE_1__","_components_avatar__WEBPACK_IMPORTED_MODULE_2__","react_toastify__WEBPACK_IMPORTED_MODULE_3__","moment__WEBPACK_IMPORTED_MODULE_4__","moment__WEBPACK_IMPORTED_MODULE_4___default","notifyAlert","message","hideProgress","toast","icon","moment","format","role","aria-label","hideProgressBar","notify","arguments","undefined"],"mappings":"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","file":"static/js/37.6aa5d0af.chunk.js","sourcesContent":["\n/**\n * Rich Text Editor - Getting Started Sample\n */\nimport React, { Fragment, useEffect, useState } from 'react';\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport {\n    Card, CardBody, CardHeader, CardTitle, FormGroup, Input, Form, Label, Button, InputGroup\n} from 'reactstrap'\n\n\n\n// ** Store & Actions\nimport { connect, useSelector } from 'react-redux'\nimport { addNewLesson } from './store/actions'\n\nimport { withRouter } from 'react-router';\nimport './style.scss'\n\nimport UILoader from '../../@core/components/ui-loader';\n\n\nimport ReactMarkdown from 'react-markdown'\nimport { render } from 'react-dom'\n\nimport { draftToMarkdown } from 'markdown-draft-js';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\nimport { notifyError, notifySuccess } from '../../utility/toast'\nimport { ArrowLeft } from 'react-feather'\n\nconst newLesson = (props) => {\n\n    const [editorState, setEditorState] = useState(() => EditorState.createEmpty(),);\n\n    const [isNewLesson, setIsNewLesson] = useState(false)\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [videoUrl, setVideoUrl] = useState(\"\")\n    const [isPreview, setIsPreview] = useState(false)\n\n    const lessonContentRef = React.createRef()\n\n    const handleEditorChange = (state) => {\n        setEditorState(state);\n    }\n\n    useEffect(() => {\n        if (!props.selectedTopic) {\n            props.history.goBack()\n        }\n    }, [props.selectedTopic])\n\n    useEffect(() => {\n        if (isNewLesson && !props.newLessonUploading && !props.newLessonError) {\n            setIsNewLesson(false)\n            notifySuccess(\"New Lesson\", \"Lesson Added successfully\")\n            props.history.goBack()\n        }\n        else if (isNewLesson && !props.newLessonUploading && props.newLessonError) {\n            setIsNewLesson(false)\n            notifyError(\"New Lesson\", props.newLessonError)\n        }\n\n    }, [props.newLessonUploading])\n\n    const youTubeParser = (url) => {\n        var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n        var match = url.match(regExp);\n        return (match && match[7].length == 11) ? match[7] : \"\";\n    }\n\n    const getVideoThumbnailUrl = (url) => {\n        let id = youTubeParser(url)\n        return `https://img.youtube.com/vi/${id}/hqdefault.jpg`\n    }\n\n    const getMarkDownContent = () => {\n        const content = editorState.getCurrentContent();\n        const rawObject = convertToRaw(content);\n        return draftToMarkdown(rawObject)\n    }\n\n    const getVideoLink = (url) => {\n        return `https://youtube.com/embed/${youTubeParser(url)}`\n    }\n\n    const submitLesson = (e) => {\n        e.preventDefault();\n        setIsNewLesson(true)\n        props.addNewLesson({\n            topic: props.selectedTopic,\n            title,\n            description,\n            content: getMarkDownContent(),\n            videoUrl: getVideoLink(videoUrl)\n        })\n    }\n\n    const renderLesson = () => {\n        let content = getMarkDownContent()\n        if (content) {\n            let uploadPath = \"http://192.168.10.102:1337/uploads/\";\n            let markdown = String(content).replaceAll(\"/uploads/\", uploadPath);\n            let fun = () => {\n                if (lessonContentRef.current) {\n                    render(<ReactMarkdown>{markdown}</ReactMarkdown>, lessonContentRef.current)\n                } else {\n                    setTimeout(fun, 100)\n                }\n            }\n            setTimeout(fun, 100)\n        }\n    }\n\n    return (\n        <Fragment >\n            <UILoader\n                blocking={props.newLessonUploading}>\n                <Card >\n                    <CardBody>\n                        <div className=\"d-flex justify-content-between align-items-center\">\n                            <div className=\"d-flex align-items-center\">\n                                <div className=\"d-none d-lg-inline d-xl-inline\">\n                                    <Button.Ripple\n                                        className='btn-block btn-icon'\n                                        color='flat-primary'\n                                        onClick={() => {\n                                            props.history.goBack()\n                                        }}\n                                    >\n                                        <ArrowLeft size={14} />\n                                    </Button.Ripple>\n                                </div>\n                                <h4 className=\"text-primary ml-25 mb-0\">\n                                    New Lesson\n                                </h4>\n                            </div>\n                            <div>\n                                <Button.Ripple\n                                    color='primary'\n                                    onClick={() => setIsPreview(!isPreview)}\n                                >\n                                    {isPreview ? \"Exit Preview\" : \"Preview\"}\n                                </Button.Ripple>\n                            </div>\n                        </div>\n                        {\n                            props.selectedTopic &&\n                            <h6 className=\"ml-25 mb-0\">\n                                {\n                                    props.topics.find(t => t.id == props.selectedTopic).title\n                                }\n                            </h6>\n                        }\n                        {\n                            isPreview ?\n                                <div className=\"active-lesson\">\n                                    <h3 className=\"mt-1\">\n                                        {title}\n                                    </h3>\n                                    {\n                                        videoUrl &&\n                                        <div className=\"mt-1 lesson-video\">\n                                            <iframe\n                                                type=\"text/html\"\n                                                src={getVideoLink(videoUrl)}\n                                                title=\"YouTube video player\"\n                                                frameBorder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                                allowFullScreen\n                                            >\n                                            </iframe>\n                                        </div>\n                                    }\n                                    <div ref={lessonContentRef}\n                                        id=\"active-lesson-content\"\n                                        className=\"mt-3\" >\n                                    </div>\n                                    {\n                                        renderLesson()\n                                    }\n                                </div>\n                                : <Form\n                                    className=\"mt-1 mb-2\"\n                                    onSubmit={e => submitLesson(e)}\n                                >\n                                    <FormGroup>\n                                        <Label className=\"ml-25\">\n                                            Title\n                                        </Label>\n                                        <InputGroup className='input-group-merge'>\n                                            <Input\n                                                type=\"text\"\n                                                placeholder='Title'\n                                                value={title}\n                                                onChange={e => setTitle(e.target.value)}\n                                                required\n                                            />\n                                        </InputGroup>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label className=\"ml-25\">\n                                            Description\n                                        </Label>\n                                        <InputGroup className='input-group-merge'>\n                                            <Input\n                                                type='textarea'\n                                                rows='4'\n                                                placeholder='Description'\n                                                value={description}\n                                                onChange={e => setDescription(e.target.value)}\n                                                required\n                                            />\n                                        </InputGroup>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label className=\"ml-25 \">\n                                            Content\n                                        </Label>\n                                        <Editor\n                                            editorState={editorState}\n                                            onEditorStateChange={handleEditorChange}\n                                            wrapperClassName=\"wrapper-class\"\n                                            editorClassName=\"editor-class\"\n                                            toolbarClassName=\"toolbar-class\"\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label className=\"ml-25\">\n                                            Video Url\n                                        </Label>\n                                        <InputGroup className='input-group-merge'>\n                                            <Input\n                                                type='url'\n                                                placeholder='video url'\n                                                value={videoUrl}\n                                                onChange={e => setVideoUrl(e.target.value)}\n                                            />\n                                        </InputGroup>\n                                    </FormGroup>\n                                    {\n                                        videoUrl &&\n                                        <FormGroup>\n                                            <img\n                                                src={getVideoThumbnailUrl(videoUrl)}\n                                                className=\"rounded  new-lesson-thumbnail\"\n                                                alt=\"Not Valid Url\" />\n                                        </FormGroup>\n                                    }\n                                    <Button.Ripple\n                                        type=\"submit\"\n                                        color='primary'\n                                        className='mt-2'\n                                    >\n                                        Submit\n                                    </Button.Ripple>\n                                </Form>\n                        }\n                    </CardBody>\n                </Card>\n            </UILoader>\n        </Fragment >\n    );\n\n}\n\n\nconst mapStateToProps = (state) => {\n\n    const {\n        topics,\n        selectedTopic,\n        newLessonUploading,\n        newLessonError\n\n    } = state.Lessons;\n    return {\n        topics,\n        selectedTopic,\n        newLessonUploading,\n        newLessonError\n    }\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {\n        addNewLesson\n    })(newLesson)\n)\n","\nimport React from 'react';\n\n// ** Third Party Components\nimport { Fragment } from 'react'\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Spinner } from 'reactstrap'\n\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n          /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","import React, { Fragment } from 'react'\n\nimport { Bell, Check, X, AlertTriangle, Info } from 'react-feather'\nimport Avatar from '@components/avatar'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\n\n\nconst notifyAlert = (title, message, hideProgress, color) => toast(\n    <Fragment>\n        <div className='toastify-header'>\n            <div className='title-wrapper mr-1'>\n                <Avatar size='sm' color={color} icon={<Bell size={12} />} />\n                <h6 className={`toast-title text-${color}`} >{title || \"Notification\"}</h6>\n            </div>\n            <small className='text-muted'>{moment().format(\"hh:mm a\")}</small>\n        </div>\n        <div className='toastify-body'>\n            <span role='img' aria-label='toast-text'>\n                {message}\n            </span>\n        </div>\n    </Fragment>,\n    { hideProgressBar: hideProgress }\n)\n\n\n/**\n * \n * @param {'success'| 'info' | 'error' | 'warning'} type \n * @param {string} title \n * @param {string} message \n * @param {boolean} hideProgress \n */\nconst notify = (type, title, message, hideProgress = true) => {\n\n    switch (type) {\n        case \"success\":\n            notifyAlert(title, message, hideProgress, 'success')\n            break;\n        case \"info\":\n            notifyAlert(title, message, hideProgress, 'info')\n            break;\n        case \"error\":\n            notifyAlert(title, message, hideProgress, 'danger')\n            break;\n        case \"warning\":\n            notifyAlert(title, message, hideProgress, 'warning')\n            break;\n        default:\n            notifyAlert(title, message, hideProgress, 'primary')\n    }\n}\n\n/**\n *  \n * @param {string} title \n * @param {string} message \n * @param {boolean} hideProgress \n */\nexport const notifySuccess = (title, message, hideProgress = true) => {\n    notify('success', title, message, hideProgress)\n}\n\n/**\n *  \n * @param {string} title \n * @param {string} message \n * @param {boolean} hideProgress \n */\nexport const notifyInfo = (title, message, hideProgress = true) => {\n    notify('info', title, message, hideProgress)\n}\n\n/**\n *  \n * @param {string} title \n * @param {string} message \n * @param {boolean} hideProgress \n */\nexport const notifyError = (title, message, hideProgress = true) => {\n    notify('error', title, message, hideProgress)\n}\n\n/**\n *  \n * @param {string} title \n * @param {string} message \n * @param {boolean} hideProgress \n */\nexport const notifyWarning = (title, message, hideProgress = true) => {\n    notify('warning', title, message, hideProgress)\n}\n\n/**\n *  \n * @param {string} title \n * @param {string} message \n * @param {boolean} hideProgress \n */\nexport const notifyPrimary = (title, message, hideProgress = true) => {\n    notify('primary', title, message, hideProgress)\n}"],"sourceRoot":""}